import CarthageKit
import ReactiveCocoa

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

final class FakeNetworkClient : NetworkClient {
	init() {
	}

	private(set) var executeDataRequestCallCount : Int = 0
	var executeDataRequestStub : ((NSURLRequest) -> (SignalProducer<NSData, CarthageError>))?
	private var executeDataRequestArgs : Array<(NSURLRequest)> = []
	func executeDataRequestReturns(stubbedValues: (SignalProducer<NSData, CarthageError>)) {
		self.executeDataRequestStub = {(request: NSURLRequest) -> (SignalProducer<NSData, CarthageError>) in
			return stubbedValues
		}
	}
	func executeDataRequestArgsForCall(callIndex: Int) -> (NSURLRequest) {
		return self.executeDataRequestArgs[callIndex]
	}
	func executeDataRequest(request: NSURLRequest) -> (SignalProducer<NSData, CarthageError>) {
		self.executeDataRequestCallCount++
		self.executeDataRequestArgs.append((request))
		return self.executeDataRequestStub!(request)
	}

	private(set) var executeDownloadRequestCallCount : Int = 0
	private var executeDownloadRequestArgs : Array<(NSURLRequest)> = []
	private var executeDownloadRequestObservers: [Int: Observer<NSURL, CarthageError>] = [:]
	func executeDownloadRequestArgsForCall(callIndex: Int) -> (NSURLRequest) {
		return self.executeDownloadRequestArgs[callIndex]
	}
	func executeDownloadRequestObserverForCall(callIndex: Int) -> Observer<NSURL, CarthageError> {
		return self.executeDownloadRequestObservers[callIndex]!
	}
	func executeDownloadRequest(request: NSURLRequest) -> (SignalProducer<NSURL, CarthageError>) {
		let currentCallCount = self.executeDownloadRequestCallCount
		let signalProducer = SignalProducer<NSURL, CarthageError> { observer, _ in
			self.executeDownloadRequestObservers[currentCallCount] = observer
		}
		self.executeDownloadRequestCallCount++
		self.executeDownloadRequestArgs.append((request))
		return signalProducer
	}

	static func reset() {
	}
}
